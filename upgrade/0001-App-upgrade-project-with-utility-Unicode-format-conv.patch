From a796703fa1b6f460aa8678755d2f4ebe28708e3b Mon Sep 17 00:00:00 2001
From: huyj2ee <huyj2ee@outlook.com>
Date: Sun, 24 Mar 2019 06:28:23 -0700
Subject: [PATCH] [App] upgrade project with utility 'Unicode format converter'

---
 .../webapp/controller/ConverterController.java     | 191 +++++++++++++++++++++
 .../template/webapp/model/UnicodeFormatForm.java   |  58 +++++++
 src/main/resources/templates/convert/home.html     |  20 +++
 src/main/resources/templates/convert/unicode.html  |  54 ++++++
 src/main/resources/templates/index.html            |  10 +-
 5 files changed, 328 insertions(+), 5 deletions(-)
 create mode 100644 src/main/java/org/phamsodiep/template/webapp/controller/ConverterController.java
 create mode 100644 src/main/java/org/phamsodiep/template/webapp/model/UnicodeFormatForm.java
 create mode 100644 src/main/resources/templates/convert/home.html
 create mode 100644 src/main/resources/templates/convert/unicode.html

diff --git a/src/main/java/org/phamsodiep/template/webapp/controller/ConverterController.java b/src/main/java/org/phamsodiep/template/webapp/controller/ConverterController.java
new file mode 100644
index 0000000..966d8f9
--- /dev/null
+++ b/src/main/java/org/phamsodiep/template/webapp/controller/ConverterController.java
@@ -0,0 +1,191 @@
+package org.phamsodiep.template.webapp.controller;
+
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.servlet.http.HttpServletRequest;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.ModelMap;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.phamsodiep.template.webapp.model.UnicodeFormatForm;
+
+
+@Controller
+public class ConverterController {
+  // View configuration: template names and urls
+  private static final String NAMESPACE               = "convert";
+  private static final String URL_PREFIX              = "/" + NAMESPACE;
+  private static final String HOME_URL                = URL_PREFIX;
+  private static final String HOME_TEMPLATE           = NAMESPACE + "/home";
+  private static final String UNICODE_CONVERTER       = "/unicode";
+  private static final String UNICODE_FORMAT_URL      = URL_PREFIX + UNICODE_CONVERTER;
+  private static final String UNICODE_FORMAT_TEMPLATE = NAMESPACE + UNICODE_CONVERTER;
+  // Unicode formater constants
+  private static final char   FMT_HIGH_CH             = (char)(0xD835);
+  private static final char   FMT_BOLD_LOW_UC_CH      = (char)(0xDE08 - 26*2);
+  private static final char   FMT_BOLD_LOW_LC_CH      = (char)(0xDE08 - 26);
+  private static final char   FMT_ITALIC_LOW_UC_CH    = (char)(0xDE08);
+  private static final char   FMT_ITALIC_LOW_LC_CH    = (char)(0xDE08 + 26);
+  private static final Pattern ITALIC_PATTERN;
+  private static final Pattern BOLD_PATTERN;
+
+
+  @RequestMapping(
+    value  = ConverterController.HOME_URL,
+    method = {RequestMethod.GET}
+  )
+  public String processConvertHomePage(ModelMap model) {
+    return ConverterController.HOME_TEMPLATE;
+  }
+
+  @RequestMapping(
+    value  = ConverterController.UNICODE_FORMAT_URL,
+    method = {RequestMethod.GET, RequestMethod.POST}
+  )
+  public String processUnicodeFormatConvertPage(
+    final UnicodeFormatForm formObj,
+    ModelMap model,
+    final HttpServletRequest req
+  ) {
+    if (req.getMethod().compareToIgnoreCase("POST") == 0) {
+      String output = this.doUnicodeFormatConvert(
+        formObj.getFormat(), formObj.getInput()
+      );
+      formObj.setOutput(output);
+    }
+    model.addAttribute("formModel", formObj);
+    return ConverterController.UNICODE_FORMAT_TEMPLATE;
+  }
+
+  private String doUnicodeEmbeddedFormatConvert(String input) {
+    StringBuffer result = new StringBuffer();
+    Matcher matcher = BOLD_PATTERN.matcher(input);
+    char format = '!';
+    int inputLength = input.length();
+    int i;
+    int pre = 0;
+    String oStr = null;
+    String iStr = null;
+
+    for (i = 0; i < inputLength; matcher.region(++i, inputLength)) {
+      // look for bold format request
+      matcher.usePattern(BOLD_PATTERN);
+      if (matcher.lookingAt()) {
+        format = 'b';
+      }
+      else {
+        // look for italic format request
+        matcher.usePattern(ITALIC_PATTERN);
+        if (matcher.lookingAt()) {
+          format = 'i';
+        }
+        else {
+          format = '!';
+        }
+      }
+      // Do format if it is requested
+      if (format != '!') {
+        i = matcher.start();
+        // Bold format pattern has just been matched
+        // Extract its matched string
+        iStr = matcher.group().substring(3, matcher.group().length() - 4);
+        // Do bold format
+        oStr = this.doUnicodeFormatConvert(format, iStr);
+        // Test if previous unformat string exists, if yes do append them
+        if (pre < i) {
+          result.append(input.substring(pre, i));
+        }
+        pre = matcher.end();
+        // Previous unformat string is processed, now append the formatted one
+        result.append(oStr);
+      }
+    }
+    // Test if there is unformat string remains, if yes do append them
+    if (pre < inputLength) {
+      result.append(input.substring(pre, inputLength));
+    }
+    return result.toString();
+  }
+
+  private String doUnicodeFormatConvert(char format, String input) {
+    if (input.length() == 0) {
+      return "";
+    }
+    if (format == '*') {
+      return this.doUnicodeEmbeddedFormatConvert(input);
+    }
+    int inputLength = input.length();
+    StringBuffer result = new StringBuffer();
+    Pattern pattern = Pattern.compile("[a-zA-Z]");
+    Matcher matcher = pattern.matcher(input);
+    int previous = 0;
+    while (matcher.find()) {
+      char inCh = matcher.group().charAt(0);
+      char[] outCh = ConverterController.format(format, inCh);
+      int start = matcher.start();
+      if (previous < start) {
+        result.append(input.substring(previous, start));
+      }
+      previous = matcher.end();
+      result.append(outCh);
+    }
+    if (previous < inputLength) {
+      result.append(input.substring(previous, inputLength));
+    }
+    return result.toString();
+  }
+
+  private static char[] format(char format, char ch) {
+    boolean isBold = true;
+    if (format == 'i') {
+      isBold = false;
+    }
+    else if (format != 'b') {
+      return new char[] {ch};
+    }
+    boolean isUpper = Character.isUpperCase(ch);
+    char lowChar = (char)(isBold ?
+      (isUpper ?
+        (ch - 'A' + FMT_BOLD_LOW_UC_CH) :
+        (ch - 'a' + FMT_BOLD_LOW_LC_CH)
+      ) :
+      (isUpper ?
+        (ch - 'A' + FMT_ITALIC_LOW_UC_CH) :
+        (ch - 'a' + FMT_ITALIC_LOW_LC_CH)
+      )
+    );
+    int codePoint = Character.toCodePoint(FMT_HIGH_CH, lowChar);
+    return Character.toChars(codePoint);
+  }
+
+  static {
+    ITALIC_PATTERN = Pattern.compile(
+      "(\\[i\\]){1}"        // start with "[i]"
+
+      + "[^"                // any thing but neither
+        + "(\\[i\\])"       //   "[i]"
+        + "(\\[/i\\])"      //   nor "[/i]"
+        + "(\\[b\\])"       //   "[b]"
+        + "(\\[/b\\])"      //   nor "[/b]"
+      + "]*"
+
+      + "(\\[/i\\]){1}"     // end with "[/i]"
+    );
+
+    BOLD_PATTERN = Pattern.compile(
+      "(\\[b\\]){1}"        // start with "[b]"
+
+      + "[^"                // any thing but neither
+        + "(\\[i\\])"       //   "[i]"
+        + "(\\[/i\\])"      //   nor "[/i]"
+        + "(\\[b\\])"       //   "[b]"
+        + "(\\[/b\\])"      //   nor "[/b]"
+      + "]*"
+
+      + "(\\[/b\\]){1}"     // end with "[/b]"
+    );
+  }
+}
+
+
diff --git a/src/main/java/org/phamsodiep/template/webapp/model/UnicodeFormatForm.java b/src/main/java/org/phamsodiep/template/webapp/model/UnicodeFormatForm.java
new file mode 100644
index 0000000..4ec53be
--- /dev/null
+++ b/src/main/java/org/phamsodiep/template/webapp/model/UnicodeFormatForm.java
@@ -0,0 +1,58 @@
+package org.phamsodiep.template.webapp.model;
+
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+
+public class UnicodeFormatForm {
+  private static final Map<String, String> formats = UnicodeFormatForm.getFormatDomainValues();
+  private char format;
+  private String input;
+  private String output;
+
+
+  public UnicodeFormatForm() {
+    this.format = 'i';
+    this.input  = "";
+    this.output = "";
+  }
+
+  public final Map<String, String> getFormats() {
+    return UnicodeFormatForm.formats;
+  }
+
+  public char getFormat() {
+    return format;
+  }
+
+  public String getInput() {
+    return this.input;
+  }
+
+  public String getOutput() {
+    return output;
+  }
+
+  public void setFormat(char format) {
+    this.format = format;
+  }
+
+  public void setInput(String unicode) {
+    this.input = unicode;
+  }
+
+  public void setOutput(String output) {
+    this.output = output;
+  }
+
+  private static final Map<String, String> getFormatDomainValues() {
+    Map<String, String> formats = new HashMap<String, String>();
+    formats.put("Italic", "i");
+    formats.put("Bold", "b");
+    formats.put("Embedded", "*");
+    return Collections.unmodifiableMap(formats); 
+  }
+}
+
diff --git a/src/main/resources/templates/convert/home.html b/src/main/resources/templates/convert/home.html
new file mode 100644
index 0000000..a90c803
--- /dev/null
+++ b/src/main/resources/templates/convert/home.html
@@ -0,0 +1,20 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="UTF-8">
+    <title>
+      Converter utilities
+    </title>
+  </head>
+
+  <body>
+    <h1>
+      Converter utilities
+    </h1>
+    <div>
+      <a href="convert/unicode">Unicode format</a>
+    </div>
+  </body>
+</html>
+
+
diff --git a/src/main/resources/templates/convert/unicode.html b/src/main/resources/templates/convert/unicode.html
new file mode 100644
index 0000000..79db445
--- /dev/null
+++ b/src/main/resources/templates/convert/unicode.html
@@ -0,0 +1,54 @@
+<!DOCTYPE html>
+<html>
+	<head>
+		<meta charset="UTF-8">
+		<title>
+		  Unicode format converter
+	  </title>
+	</head>
+
+	<body>
+    <h1>
+      Unicode format converter
+    </h1>
+	  <form
+	   action="/convert/unicode"
+	   th:object="${formModel}"
+	   method="post"
+	  >
+      <b>
+        Format:
+      </b>
+      <div th:each="item : *{formats}">
+        <input
+        type="radio"
+        th:field="*{format}"
+        th:value="${item.value}"
+        th:text="${item.key}"
+        >
+      </div>
+      <br /><br />
+      <b>
+        Input: <br /><br />
+      </b>
+      <textarea rows="25" cols="80" th:field="*{input}">
+        ...
+      </textarea>
+      <br /><br />
+      <button
+      type="submit"
+      >
+        Convert
+      </button>
+      <br /><br /><br /><br />
+      <b>
+        Output: <br /><br />
+      </b>
+      <textarea readonly=true rows="25" cols="80" th:field="*{output}">
+        ...
+      </textarea>
+	  </form>
+	</body>
+</html>
+
+
diff --git a/src/main/resources/templates/index.html b/src/main/resources/templates/index.html
index 22329c2..7fcee68 100644
--- a/src/main/resources/templates/index.html
+++ b/src/main/resources/templates/index.html
@@ -1,17 +1,17 @@
 <html>
   <head>
     <title>
-      Google app engine hi cloud web application
+      Google app engine utilities
     </title>
   </head>
 
   <body>
     <h1>
-      Hi Cloud!
+      Google app engine utilities
     </h1>
-    <p>
-      My name is Sephiroth. I worked for Shinra.
-    </p>
+    <div>
+      <a href="convert">Converter utilities group</a>
+    </div>
     </body>
 </html>
 
-- 
2.11.0

